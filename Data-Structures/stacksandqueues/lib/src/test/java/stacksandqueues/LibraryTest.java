/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package stacksandqueues;

import org.junit.Test;

import static org.junit.Assert.*;

public class LibraryTest {

  @Test
  public void testStack() {
    Stack stackClassTest = new Stack();
    System.out.println(stackClassTest.isEmpty());
    assertTrue(stackClassTest.isEmpty());
    System.out.println(stackClassTest.peek());
    assertEquals("java.lang.NullPointerException", stackClassTest.peek().toString());
    stackClassTest.push(4);
    stackClassTest.push(6);
    stackClassTest.push(8);
    assertFalse(stackClassTest.isEmpty());
    assertEquals("Stack{top=Node{value=8, next=Node{value=6, next=Node{value=4, next=null}}}}",stackClassTest.toString());
    assertEquals("8",stackClassTest.peek().toString());
    assertEquals("Node{value=8, next=null}",stackClassTest.pop().toString());
    System.out.println(stackClassTest);
    assertEquals("6",stackClassTest.peek().toString());
//    System.out.println(stackClassTest.peek());
//    System.out.println(stackClassTest.pop());
    assertEquals("Node{value=6, next=null}",stackClassTest.pop().toString());
    assertEquals("Stack{top=Node{value=4, next=null}}",stackClassTest.toString());
    System.out.println(stackClassTest);
  }
  @Test public void testQueue(){
    Queue queueClassTest
      =new Queue();
    assertTrue(queueClassTest.isEmpty());
    queueClassTest.enqueue(3);
    assertFalse(queueClassTest.isEmpty());
    queueClassTest.enqueue(5);
    queueClassTest.enqueue(7);
    queueClassTest.enqueue(9);
    assertEquals("Queue{front=Node{value=3, next=Node{value=5, next=Node{value=7, next=Node{value=9, next=null}}}}, rear=Node{value=9, next=null}}",queueClassTest.toString());
//    System.out.println(queueClassTest);
    assertEquals("Node{value=3, next=null}",queueClassTest.dequeue().toString());
//    System.out.println(queueClassTest.dequeue());
    System.out.println(queueClassTest.peek());
    assertEquals("5",queueClassTest.peek().toString());
    System.out.println(queueClassTest);
    assertEquals("Queue{front=Node{value=5, next=Node{value=7, next=Node{value=9, next=null}}}, rear=Node{value=9, next=null}}",queueClassTest.toString());
//    System.out.println(queueClassTest.dequeue());
//    System.out.println(queueClassTest.peek());
//    System.out.println(queueClassTest);
    assertTrue(true);
  }
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////
  //lab 11 //PseudoQueue
  @Test
  public void testPseudoEnqueue(){
    //PseudoQueue
    PseudoQueue pseudoQueueClassTest = new PseudoQueue();
    pseudoQueueClassTest.enqueue(4);
    pseudoQueueClassTest.enqueue(6);
    System.out.println(pseudoQueueClassTest);
assertEquals("PseudoQueue{firstStack=Stack{top=Node{value=Node{value=Node{value=4, next=null}, next=null}, next=Node{value=6, next=null}}},secondStack=Stack{top=null}}",pseudoQueueClassTest.toString());

  }
  @Test
  public void testPseudoDequeue(){
    //PseudoQueue
    PseudoQueue pseudoQueueClassTest = new PseudoQueue();
    pseudoQueueClassTest.enqueue(4);
    pseudoQueueClassTest.enqueue(6);
    pseudoQueueClassTest.enqueue(8);
    pseudoQueueClassTest.dequeue();
    pseudoQueueClassTest.dequeue();
    System.out.println(pseudoQueueClassTest);
    assertEquals("PseudoQueue{firstStack=Stack{top=Node{value=8, next=null}},secondStack=Stack{top=null}}",pseudoQueueClassTest.toString());
  }
}
