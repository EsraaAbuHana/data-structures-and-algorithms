/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package find.maximum.value;

public class App extends BinaryTree{

public static Object findMaximumValue(BinaryTree output) {
    try {
      if (output.root==null)return 0;
    }catch (Exception ex){
      System.out.println(ex);
    }
    return (output.inOrder(output.root).get((output.inOrder(output.root)).size()-1));
}

    public static void main(String[] args) {

      BinaryTree output=new BinaryTree();
      BinaryTree empty=new BinaryTree();

//      output.add(5);
//      output.add(7);
//      output.add(5);
//      output.add(2);
//      output.add(6);
//      output.add(5);
//      output.add(9);
//      output.add(5);
//      output.add(11);
//      output.add(4);

      output.root=new Node(2);
      output.root.left=new Node(7);
      output.root.right=new Node(5);
      output.root.left.left=new Node(2);
      output.root.left.right=new Node(6);
      output.root.right.right=new Node(9);
      output.root.left.right.left=new Node(5);
      output.root.left.right.right=new Node(11);
      output.root.right.right.left=new Node(4);


      System.out.println(output.tree);

      System.out.println(output);
BreadthFirstTraversal.breadthFirstTraversal(output);
      System.out.println(BreadthFirstTraversal.breadthFirstTraversal(output));
      System.out.println(BreadthFirstTraversal.breadthFirstTraversal(empty));

    }
}
